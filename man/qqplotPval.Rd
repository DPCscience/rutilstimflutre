% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stats.R
\name{qqplotPval}
\alias{qqplotPval}
\title{Q-Q plot for p values}
\usage{
qqplotPval(pvalues, plot.conf.int = TRUE, xlab = expression(Expected ~
  ~-log[10](italic(p) ~ values)), ylab = expression(Observed ~
  ~-log[10](italic(p) ~ values)), main = NULL, col = NULL)
}
\arguments{
\item{pvalues}{vector of raw p values (missing values will be omitted)}

\item{plot.conf.int}{show the confidence interval}

\item{xlab}{a title for the x axis (see default)}

\item{ylab}{a title for the x axis (see default)}

\item{main}{an overall title for the plot (default: "Q-Q plot (<length(pvalues)> p values)")}

\item{col}{vector of plotting color(s) for the points (default is all points in black)}

\item{...}{graphical parameters other than xlim, ylim, xlab, ylab, las and col}
}
\value{
invisible vector of pvalues with NA omitted
}
\description{
Produce a quantile-quantile plot for p values and display its confidence interval.
A quantile is an order statistic, and the j-th order statistic from a Uniform(0,1) sample has a Beta(j,N-j+1) distribution (Casella & Berger, 2001, 2nd edition, p230). Let us assume we have N independent p values, \eqn{\{p_1,\ldots,p_N\}}. Under the null, they are independent and identically uniformly distributed: \eqn{\forall i \; p_i \sim \mathcal{U}_{[0,1]}}. Therefore, the 95\% confidence interval for the j-th quantile of the set of p values can be calculated with: qbeta(0.95, j, N-j+1). See also the qqman package.
}
\examples{
set.seed(1859)
P <- 1000; P1 <- 100; thresh <- 0.05
pvalues.0 <- setNames(runif(n=P-P1, min=0, max=1),
                      paste0("null",1:(P-P1)))
pvalues.1 <- setNames(rbeta(n=P1, shape1=1, shape2=10^3),
                      paste0("alt", 1:P1))
pvalues <- c(pvalues.0, pvalues.1)
pvalues[c(1,10)] <- NA
plotHistPval(pvalues, pi0=(P-P1)/P, freq=TRUE)
pvalues <- qqplotPval(pvalues)
pval.bonf <- p.adjust(pvalues, method="bonferroni")
sum(pval.bonf <= thresh) # 9
names(pvalues)[pval.bonf <= thresh]
pval.bh <- p.adjust(pvalues, method="BH")
sum(pval.bh <= thresh) # 104
names(pvalues)[pval.bh <= thresh]
lim.pval.bonf <- sort(pvalues[pval.bonf <= thresh], decreasing=TRUE)[1]
abline(h=-log10(lim.pval.bonf), lty=2)
lim.pval.BH <- sort(pvalues[pval.bh <= thresh], decreasing=TRUE)[1]
abline(h=-log10(lim.pval.BH), lty=3)
legend(x=2.2, y=1.8, legend=c(paste0(sum(pval.bonf <= thresh),
 " tests significant at 5\%\\nwith FWER controlled via Bonferroni"),
 paste0(sum(pval.bh <= thresh), " tests significant at 5\%",
 "\\nwith FDR controlled via BH")), lty=c(2,3), bty="n", y.intersp=2)
}
\author{
Timothee Flutre (inspired by an anonymous comment at http://gettinggeneticsdone.blogspot.fr/2009/11/qq-plots-of-p-values-in-r-using-ggplot2.html)
}
\seealso{
\code{\link{plotHistPval}}
}

